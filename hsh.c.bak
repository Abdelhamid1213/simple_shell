#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>

char *_getenv(const char *env_var)
{
	extern char **environ;
	int i = 0;
	char *key;

	while (environ[i])
	{
		key = strtok(environ[i], "=");
		if (strcmp(env_var, key) == 0)
			return (strtok(NULL, "\n"));
		i++;
	}
	return (NULL);
}

char *get_command (char *command)
{
	char *path = _getenv("PATH");
	char *token;
	char *cmd_full;
	struct stat st;

	token = strtok(path, ":");
	while (token)
	{
		cmd_full = malloc(strlen(token) + strlen(command) + 2);
		strcpy(cmd_full, token);
		strcat(cmd_full, "/");
		strcat(cmd_full, command);
		if (stat(cmd_full, &st) == 0)
			return (cmd_full);
		free(cmd_full);
		token = strtok(NULL, ":");
	}
	return (NULL);
}

char **tokenizer(char *str)
{
	char *portion;
	char **portions = NULL;
	int i = 0;
	char *delim = " \n\t";

	portion = strtok(str, delim);
	while (portion)
	{
		i++;
		portions = realloc(portions, i * sizeof(char *));
		if (portions == NULL)
		{
			perror("Realloc Tokenizer");
			exit(EXIT_FAILURE);
		}
		portions[i - 1] = portion;
		portion = strtok(NULL, delim);
	}
	return (portions);
}

void env_builtin()
{
	extern char **environ;

	while (*environ != NULL)
	{
		printf("%s\n", *environ);
		environ++;
	}
}

int main(int ac, char **av, char **env)
{
	char *buffer = NULL;
	size_t buffer_size = 0;
	char *cmd;
	char **args;
	pid_t pid;
	int status, n_chars;

	while (1)
	{
		write(1, "$ ", 2);
		n_chars = getline(&buffer, &buffer_size, stdin);
		if (n_chars == -1)
		{
			write(1, "\n", 1);
			exit(1);
		}

		if (n_chars != 1)
		{
			args = tokenizer(buffer);
			if (strcmp(args[0], "exit") == 0)
				exit(0);
			if (strcmp(args[0], "env") == 0)
				env_builtin();
			pid = fork();
			if (pid == 0)
			{
				cmd = get_command(args[0]);
				if (cmd)
					execve(cmd, args, env);
				else
					printf("Command not found\n");
				exit(0);
			}
			else
				wait(&status);
		}
	}
	return (0);
}
